module Setting
open(Prelude, Constants)

type timeSetting = { minutes : int32; fifteenSeconds : int32 }

let bState = Button:state()
let bEdgeState = ref Io:low()
let numLedsLit = ref (timeSetting {minutes=0; fifteenSeconds=0})
let tState = Time:state()
let cursorState = ref Io:low()
let outputUpdateState = ref (!cursorState, !numLedsLit)
let outputState = ref !outputUpdateState

fun reset(timeRemaining) = (
    set ref numLedsLit = timeSetting {minutes=0; fifteenSeconds=0};
    set ref cursorState = Io:low();
    set ref outputUpdateState = (!cursorState, !numLedsLit);
    set ref outputState = !outputUpdateState;
    set ref timeRemaining = 0;
    ()
)

fun execute(timeRemaining : int32 ref) : unit = (
    let cursorSig = IoExt:every(500, tState, cursorState);
    let buttonSig =
        Io:risingEdge(
            Button:debounce(Io:digIn(buttonPin), bState),
            bEdgeState);
    let numLedsLitUpdateSig =
        buttonSig |>
        Signal:foldP(
            fn (u, prevSetting) -> (
                let timeSetting {
                    minutes=prevMinutes;
                    fifteenSeconds=prevFifteenSeconds} = prevSetting;
                // For safety
                if (prevMinutes + prevFifteenSeconds + 1) >= numLeds then
                    prevSetting
                elif ((prevFifteenSeconds + 1) mod 4) == 0 then
                    timeSetting {
                        minutes = prevMinutes + 1;
                        fifteenSeconds = 0}
                else
                    timeSetting {
                        minutes = prevMinutes;
                        fifteenSeconds = prevFifteenSeconds + 1}
                end
            ) end,
            numLedsLit);
    // zip the cursor and button signal
    let outputUpdateSig = SignalExt:zip(cursorSig, numLedsLitUpdateSig, outputUpdateState);
    // Latch the output sig since we want the next sink call to
    // execute every frame
    let outputSig = Signal:latch(outputUpdateSig, outputState);
    outputSig |>
    Signal:sink(
        fn (out) -> (
           let (cursor, timeSetting {
                              minutes = numMinutes;
                              fifteenSeconds = numFifteenSeconds}) = out;
            set ref timeRemaining = (numMinutes * 60000) +
                                    (numFifteenSeconds * 15000);
            // Draw the number of minutes
            for i in 0 to numMinutes - 1 do
                FastLed:setLedColor(numLeds - i - 1, blue, leds)
            end;
            // Draw the number of 15 seconds
            for i in 0 to numFifteenSeconds - 1 do
                FastLed:setLedColor(numLeds - (numMinutes + i) - 1, pink, leds)
            end;
            case cursor of
            | Io:high() =>
                FastLed:setLedColor(
                    numLeds - (numMinutes + numFifteenSeconds) - 1,
                    white, leds)
            | _ =>
                ()
            end
        ) end)
)
