module SignalExt
open(Prelude)

fun constant(val) =
    signal(just(val))

fun meta(sigA) = (
    let signal(val) = sigA;
    constant(val)
)

fun unmeta<'a>(sigA) =
    case sigA of
    | signal(just(just(val))) =>
        constant(val)
    | _ =>
        signal(nothing())
    end

fun zip(sigA, sigB, state) =
    Signal:map2(fn (valA, valB) -> (valA, valB) end, sigA, sigB, state)

fun toggle(val1, val2, state, incoming) =
    incoming |>
    Signal:foldP(
        fn (event, prevVal) ->
            if prevVal == val1 then
                val2
            else
                val1
            end
        end, state)
