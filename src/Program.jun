module Program
open(Prelude)

type mode = setting
          | timing
          | paused
          | finale

type flip = flipUp
          | flipDown
          | flipFlat

let numLeds : uint16 = 33
let leds : FastLed:fastLedStrip = FastLed:make(numLeds)

let accState : maybe<Accelerometer:orientation> ref = ref nothing<Accelerometer:orientation>()
let modeState : mode ref = ref setting()

let timeRemaining : int32 ref = ref 0

fun setup() : unit =
    Time:wait(500)

fun main() : unit = (
    setup();
    let blank = FastLed:color {r=0; g=0; b=0 };
    let red = FastLed:color {r=255; g=0; b=0 };
    let green = FastLed:color {r=0; g=255; b=0 };
    let blue = FastLed:color {r=0; g=0; b=255 };
    let white = FastLed:color {r=255; g=255; b=255 };
    while true do (
        for i : uint16 in 0 to 32 do
            FastLed:setLedColor(i, blank, leds)
        end;
        let accSig = Signal:dropRepeats<Accelerometer:orientation>(Accelerometer:getSignal(), accState);
        let flipSig =
            Signal:map<Accelerometer:orientation, flip>(
                fn (o : Accelerometer:orientation) : flip ->
                    case o of
                    | Accelerometer:xUp() => flipUp()
                    | Accelerometer:xDown() => flipDown()
                    | _  => flipFlat()
                    end, accSig);
        let metaFlipSig = SignalExt:meta<flip>(flipSig);
        let modeSig =
            Signal:foldP<maybe<flip>, mode>(
                fn (f1 : maybe<flip>, prevMode : mode) : mode ->
                    if (prevMode == timing()) and (!timeRemaining == 0) then
                        finale()
                    else
                        case f1 of
                        | just<flip>(f2 : flip) =>
                            // There is a flip event on the metaFlipSig
                            case (f2, prevMode) of
                            | (flipUp(),   setting()) => timing()
                            | (flipUp(),   paused())  => timing()
                            | (flipDown(), timing())  => (Setting:reset(timeRemaining); setting())
                            | (flipDown(), paused())  => (Setting:reset(timeRemaining); setting())
                            | (flipFlat(), timing())  => paused()
                            | _ => prevMode
                            end
                        | _ =>
                            // There wasn't a flip event on the metaFlipSig
                            prevMode
                        end
                    end, modeState, metaFlipSig);
        Signal:sink<mode>(fn (m : mode) : unit ->
            case m of
            | setting() => (FastLed:setLedColor(0, red, leds); Setting:execute(timeRemaining, leds))
            | timing() => (FastLed:setLedColor(1, green, leds); Timing:execute())
            | paused() => (FastLed:setLedColor(2, blue, leds); Paused:execute())
            | finale() => (FastLed:setLedColor(3, white, leds); Finale:execute())
            end, modeSig);
        FastLed:show()
    ) end
)
